***************************************************
*
* Copyright 2008 Alexandre Skyrme, Noemi Rodriguez, Roberto Ierusalimschy
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
* 
*****************************************************
*
* [README]                                          
*
****************************************************


**************
* PARENT API *
**************

-- Create a new lua process
-- Returns true if sucessful or nil, error_message if failed
luaproc.newproc( <string lua_code> )

-- Create a new worker (pthread) 
-- Returns true if sucessful or nil, error_message if failed
luaproc.createworker( <void> )

-- Destroy a  worker (pthread) 
-- Returns true if sucessful or nil, error_message if failed
luaproc.destroyworker( <void> )

-- Synchronize workers (pthreads) and exit after all lua processes have ended
-- No return, finishes execution.
luaproc.exit( <void> )

-- Set maximum lua processes that should be recycled (default = 0)
-- Returns true if sucessful or nil, error_message if failed
luaproc.recycle( <int maxrecycle> )

************************************************************
* CHILD API                                                *
* Available only to processes spawned                      *
* with luaproc.newproc                                     *
************************************************************

-- Create a new lua process
-- Returns true if sucessful or nil, error_message if failed
luaproc.newproc( <string lua_code> )

-- Create a new worker (pthread) 
-- Returns true if sucessful or nil, error_message if failed
luaproc.createworker( <void> )

-- Destroy a worker (pthread) 
-- Returns true if sucessful or nil, error_message if failed
luaproc.destroyworker( <void> )

-- Send a message on a channel
-- Returns true if sucessful or nil, error_message if failed
-- Results in blocking if there is no matching receive
luaproc.send( <string channel_name>, <string msg1>,
				[string msg2], [string msg3], ... )

-- Receive a message on a channel
-- Returns message string(s) if sucessful or nil, error_message if failed
-- Results in blocking if there is no matching send
-- and the asynchronous flag is not set (nil) or set to false
luaproc.receive( <string channel_name>, [boolean asynchronous] )

-- Create a new channel
-- Returns true if sucessful or nil, error_message if failed
luaproc.newchannel( <string channel_name> )

-- Destroy a channel
-- Returns true if sucessful or nil, error_message if failed
luaproc.delchannel( <string channel_name> )

-- Set maximum lua processes that should be recycled (default = 0)
-- Returns true if sucessful or nil, error_message if failed
luaproc.recycle( <int maxrecycle> )

<> = mandatory arguments
[] = optional arguments
