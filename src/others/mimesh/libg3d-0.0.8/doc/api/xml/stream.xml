<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libg3d-stream">
<refmeta>
<refentrytitle role="top_of_page" id="libg3d-stream.top_of_page">stream</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBG3D Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>stream</refname>
<refpurpose>I/O abstraction layer for plugins</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="libg3d-stream.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;g3d/stream.h&gt;

                    <link linkend="G3DStream">G3DStream</link>;
<link linkend="G3DStream">G3DStream</link>*          <link linkend="g3d-stream-open-file">g3d_stream_open_file</link>                (const <link linkend="gchar">gchar</link> *filename,
                                                         const <link linkend="gchar">gchar</link> *mode);
<link linkend="G3DStream">G3DStream</link>*          <link linkend="g3d-stream-open-structured-file">g3d_stream_open_structured_file</link>     (const <link linkend="gchar">gchar</link> *filename,
                                                         const <link linkend="gchar">gchar</link> *subfile);
<link linkend="G3DStream">G3DStream</link>*          <link linkend="g3d-stream-open-structured-file-from-stream">g3d_stream_open_structured_file_from_stream</link>
                                                        (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         const <link linkend="gchar">gchar</link> *subfile);
<link linkend="G3DStream">G3DStream</link>*          <link linkend="g3d-stream-open-zip">g3d_stream_open_zip</link>                 (const <link linkend="gchar">gchar</link> *filename,
                                                         const <link linkend="gchar">gchar</link> *subfile);
<link linkend="G3DStream">G3DStream</link>*          <link linkend="g3d-stream-open-zip-from-stream">g3d_stream_open_zip_from_stream</link>     (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         const <link linkend="gchar">gchar</link> *subfile);
<link linkend="G3DStream">G3DStream</link>*          <link linkend="g3d-stream-open-gzip-from-stream">g3d_stream_open_gzip_from_stream</link>    (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="G3DStream">G3DStream</link>*          <link linkend="g3d-stream-from-buffer">g3d_stream_from_buffer</link>              (<link linkend="guint8">guint8</link> *buffer,
                                                         <link linkend="gsize">gsize</link> size,
                                                         const <link linkend="gchar">gchar</link> *title,
                                                         <link linkend="gboolean">gboolean</link> free_buffer);
<link linkend="G3DStream">G3DStream</link>*          <link linkend="g3d-stream-zlib-inflate-stream">g3d_stream_zlib_inflate_stream</link>      (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="gsize">gsize</link> cmp_size);
<link linkend="G3DStream">G3DStream</link>*          <link linkend="g3d-stream-new-custom">g3d_stream_new_custom</link>               (<link linkend="guint32">guint32</link> flags,
                                                         const <link linkend="gchar">gchar</link> *uri,
                                                         <link linkend="G3DStreamReadFunc">G3DStreamReadFunc</link> readfunc,
                                                         <link linkend="G3DStreamReadLineFunc">G3DStreamReadLineFunc</link> readlinefunc,
                                                         <link linkend="G3DStreamSeekFunc">G3DStreamSeekFunc</link> seekfunc,
                                                         <link linkend="G3DStreamTellFunc">G3DStreamTellFunc</link> tellfunc,
                                                         <link linkend="G3DStreamSizeFunc">G3DStreamSizeFunc</link> sizefunc,
                                                         <link linkend="G3DStreamEofFunc">G3DStreamEofFunc</link> eoffunc,
                                                         <link linkend="G3DStreamCloseFunc">G3DStreamCloseFunc</link> closefunc,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="gint">gint</link>                <link linkend="g3d-stream-close">g3d_stream_close</link>                    (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="gint">gint</link>                <link linkend="g3d-stream-skip">g3d_stream_skip</link>                     (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="goffset">goffset</link> offset);
<link linkend="gint">gint</link>                <link linkend="g3d-stream-seek">g3d_stream_seek</link>                     (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="goffset">goffset</link> offset,
                                                         <link linkend="GSeekType">GSeekType</link> whence);
<link linkend="goffset">goffset</link>             <link linkend="g3d-stream-tell">g3d_stream_tell</link>                     (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="goffset">goffset</link>             <link linkend="g3d-stream-size">g3d_stream_size</link>                     (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="gboolean">gboolean</link>            <link linkend="g3d-stream-eof">g3d_stream_eof</link>                      (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="gboolean">gboolean</link>            <link linkend="g3d-stream-is-seekable">g3d_stream_is_seekable</link>              (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="gchar">gchar</link>*              <link linkend="g3d-stream-get-uri">g3d_stream_get_uri</link>                  (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="guint32">guint32</link>             <link linkend="g3d-stream-line">g3d_stream_line</link>                     (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="gsize">gsize</link>               <link linkend="g3d-stream-read">g3d_stream_read</link>                     (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="gpointer">gpointer</link> ptr,
                                                         <link linkend="gsize">gsize</link> size);
<link linkend="gchar">gchar</link>*              <link linkend="g3d-stream-read-line">g3d_stream_read_line</link>                (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="gchar">gchar</link> *buf,
                                                         <link linkend="gsize">gsize</link> size);
<link linkend="gint32">gint32</link>              <link linkend="g3d-stream-read-int8">g3d_stream_read_int8</link>                (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="gint32">gint32</link>              <link linkend="g3d-stream-read-int16-be">g3d_stream_read_int16_be</link>            (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="gint32">gint32</link>              <link linkend="g3d-stream-read-int16-le">g3d_stream_read_int16_le</link>            (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="gint32">gint32</link>              <link linkend="g3d-stream-read-int32-be">g3d_stream_read_int32_be</link>            (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="gint32">gint32</link>              <link linkend="g3d-stream-read-int32-le">g3d_stream_read_int32_le</link>            (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="G3DFloat">G3DFloat</link>            <link linkend="g3d-stream-read-float-be">g3d_stream_read_float_be</link>            (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="G3DFloat">G3DFloat</link>            <link linkend="g3d-stream-read-float-le">g3d_stream_read_float_le</link>            (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="G3DDouble">G3DDouble</link>           <link linkend="g3d-stream-read-double-be">g3d_stream_read_double_be</link>           (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="G3DDouble">G3DDouble</link>           <link linkend="g3d-stream-read-double-le">g3d_stream_read_double_le</link>           (<link linkend="G3DStream">G3DStream</link> *stream);
<link linkend="gint32">gint32</link>              <link linkend="g3d-stream-read-cstr">g3d_stream_read_cstr</link>                (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint32">gint32</link> max_len);
<link linkend="gint">gint</link>                (<link linkend="G3DStreamCloseFunc">*G3DStreamCloseFunc</link>)               (<link linkend="gpointer">gpointer</link> data);
<link linkend="gboolean">gboolean</link>            (<link linkend="G3DStreamEofFunc">*G3DStreamEofFunc</link>)                 (<link linkend="gpointer">gpointer</link> data);
<link linkend="gsize">gsize</link>               (<link linkend="G3DStreamReadFunc">*G3DStreamReadFunc</link>)                (<link linkend="gpointer">gpointer</link> ptr,
                                                         <link linkend="gsize">gsize</link> size,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="gchar">gchar</link>*              (<link linkend="G3DStreamReadLineFunc">*G3DStreamReadLineFunc</link>)            (<link linkend="gchar">gchar</link> *buf,
                                                         <link linkend="gsize">gsize</link> size,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="gint">gint</link>                (<link linkend="G3DStreamSeekFunc">*G3DStreamSeekFunc</link>)                (<link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="goffset">goffset</link> offset,
                                                         <link linkend="GSeekType">GSeekType</link> whence);
<link linkend="goffset">goffset</link>             (<link linkend="G3DStreamSizeFunc">*G3DStreamSizeFunc</link>)                (<link linkend="gpointer">gpointer</link> data);
<link linkend="goffset">goffset</link>             (<link linkend="G3DStreamTellFunc">*G3DStreamTellFunc</link>)                (<link linkend="gpointer">gpointer</link> data);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libg3d-stream.description" role="desc">
<title role="desc.title">Description</title>
<para>
A stream is an abstraction for data input. It enables plugins to read
data from a file, a memory buffer, a container file or some other medium.</para>
<para>

</para>
</refsect1>

<refsect1 id="libg3d-stream.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="G3DStream" role="struct">
<title>G3DStream</title>
<indexterm zone="G3DStream"><primary>G3DStream</primary></indexterm><programlisting>typedef struct {
} G3DStream;
</programlisting>
<para>
An abstraction of input handling.</para>
<para>

</para></refsect2>
<refsect2 id="g3d-stream-open-file" role="function">
<title>g3d_stream_open_file ()</title>
<indexterm zone="g3d-stream-open-file"><primary>g3d_stream_open_file</primary></indexterm><programlisting><link linkend="G3DStream">G3DStream</link>*          g3d_stream_open_file                (const <link linkend="gchar">gchar</link> *filename,
                                                         const <link linkend="gchar">gchar</link> *mode);</programlisting>
<para>
Opens a file with the C stdio routines.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> the name of the file to open
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&nbsp;:</term>
<listitem><simpara> the mode to open the file, as given to <link linkend="fopen"><function>fopen()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="G3DStream"><type>G3DStream</type></link> or NULL in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-open-structured-file" role="function">
<title>g3d_stream_open_structured_file ()</title>
<indexterm zone="g3d-stream-open-structured-file"><primary>g3d_stream_open_structured_file</primary></indexterm><programlisting><link linkend="G3DStream">G3DStream</link>*          g3d_stream_open_structured_file     (const <link linkend="gchar">gchar</link> *filename,
                                                         const <link linkend="gchar">gchar</link> *subfile);</programlisting>
<para>
Open a file within a Structured File as <link linkend="G3DStream"><type>G3DStream</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> name of container file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subfile</parameter>&nbsp;:</term>
<listitem><simpara> name of (contained) sub-file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="G3DStream"><type>G3DStream</type></link> or NULL in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-open-structured-file-from-stream" role="function">
<title>g3d_stream_open_structured_file_from_stream ()</title>
<indexterm zone="g3d-stream-open-structured-file-from-stream"><primary>g3d_stream_open_structured_file_from_stream</primary></indexterm><programlisting><link linkend="G3DStream">G3DStream</link>*          g3d_stream_open_structured_file_from_stream
                                                        (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         const <link linkend="gchar">gchar</link> *subfile);</programlisting>
<para>
Open a file within a Structured File which is opened as a stream. At the
moment this only works for streams opened by <link linkend="g3d-stream-open-file"><function>g3d_stream_open_file()</function></link> as
the file is directly opened again.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> stream of container file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subfile</parameter>&nbsp;:</term>
<listitem><simpara> name of (contained) sub-file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="G3DStream"><type>G3DStream</type></link> or NULL in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-open-zip" role="function">
<title>g3d_stream_open_zip ()</title>
<indexterm zone="g3d-stream-open-zip"><primary>g3d_stream_open_zip</primary></indexterm><programlisting><link linkend="G3DStream">G3DStream</link>*          g3d_stream_open_zip                 (const <link linkend="gchar">gchar</link> *filename,
                                                         const <link linkend="gchar">gchar</link> *subfile);</programlisting>
<para>
Open a file within a Zip archive.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> name of container file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subfile</parameter>&nbsp;:</term>
<listitem><simpara> name of (contained) sub-file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="G3DStream"><type>G3DStream</type></link> or NULL in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-open-zip-from-stream" role="function">
<title>g3d_stream_open_zip_from_stream ()</title>
<indexterm zone="g3d-stream-open-zip-from-stream"><primary>g3d_stream_open_zip_from_stream</primary></indexterm><programlisting><link linkend="G3DStream">G3DStream</link>*          g3d_stream_open_zip_from_stream     (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         const <link linkend="gchar">gchar</link> *subfile);</programlisting>
<para>
Open a file within a Zip archive which is opened as a stream. At the
moment this only works for streams opened by <link linkend="g3d-stream-open-file"><function>g3d_stream_open_file()</function></link> as
the file is directly opened again.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> stream of container file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subfile</parameter>&nbsp;:</term>
<listitem><simpara> name of (contained) sub-file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="G3DStream"><type>G3DStream</type></link> or NULL in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-open-gzip-from-stream" role="function">
<title>g3d_stream_open_gzip_from_stream ()</title>
<indexterm zone="g3d-stream-open-gzip-from-stream"><primary>g3d_stream_open_gzip_from_stream</primary></indexterm><programlisting><link linkend="G3DStream">G3DStream</link>*          g3d_stream_open_gzip_from_stream    (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Reads data from a gzip-compressed stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="G3DStream"><type>G3DStream</type></link> or NULL in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-from-buffer" role="function">
<title>g3d_stream_from_buffer ()</title>
<indexterm zone="g3d-stream-from-buffer"><primary>g3d_stream_from_buffer</primary></indexterm><programlisting><link linkend="G3DStream">G3DStream</link>*          g3d_stream_from_buffer              (<link linkend="guint8">guint8</link> *buffer,
                                                         <link linkend="gsize">gsize</link> size,
                                                         const <link linkend="gchar">gchar</link> *title,
                                                         <link linkend="gboolean">gboolean</link> free_buffer);</programlisting>
<para>
Use a buffer in memory as <link linkend="G3DStream"><type>G3DStream</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> memory buffer to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> size of buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>title</parameter>&nbsp;:</term>
<listitem><simpara> optional title of stream, may be NULL
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>free_buffer</parameter>&nbsp;:</term>
<listitem><simpara> whether to free the memory with <link linkend="g-free"><function>g_free()</function></link> on <link linkend="g3d-stream-close"><function>g3d_stream_close()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="G3DStream"><type>G3DStream</type></link> or NULL in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-zlib-inflate-stream" role="function">
<title>g3d_stream_zlib_inflate_stream ()</title>
<indexterm zone="g3d-stream-zlib-inflate-stream"><primary>g3d_stream_zlib_inflate_stream</primary></indexterm><programlisting><link linkend="G3DStream">G3DStream</link>*          g3d_stream_zlib_inflate_stream      (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="gsize">gsize</link> cmp_size);</programlisting>
<para>
Opens a new stream to decompress zlib-deflated parts of a stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> a parent stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cmp_size</parameter>&nbsp;:</term>
<listitem><simpara> the compressed size of the deflated part
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="G3DStream"><type>G3DStream</type></link> or NULL in case of an error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-new-custom" role="function">
<title>g3d_stream_new_custom ()</title>
<indexterm zone="g3d-stream-new-custom"><primary>g3d_stream_new_custom</primary></indexterm><programlisting><link linkend="G3DStream">G3DStream</link>*          g3d_stream_new_custom               (<link linkend="guint32">guint32</link> flags,
                                                         const <link linkend="gchar">gchar</link> *uri,
                                                         <link linkend="G3DStreamReadFunc">G3DStreamReadFunc</link> readfunc,
                                                         <link linkend="G3DStreamReadLineFunc">G3DStreamReadLineFunc</link> readlinefunc,
                                                         <link linkend="G3DStreamSeekFunc">G3DStreamSeekFunc</link> seekfunc,
                                                         <link linkend="G3DStreamTellFunc">G3DStreamTellFunc</link> tellfunc,
                                                         <link linkend="G3DStreamSizeFunc">G3DStreamSizeFunc</link> sizefunc,
                                                         <link linkend="G3DStreamEofFunc">G3DStreamEofFunc</link> eoffunc,
                                                         <link linkend="G3DStreamCloseFunc">G3DStreamCloseFunc</link> closefunc,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Creates a new <link linkend="G3DStream"><type>G3DStream</type></link> with custom callback functions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> stream capability flags
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> URI of new stream, must not be NULL
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>readfunc</parameter>&nbsp;:</term>
<listitem><simpara> read callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>readlinefunc</parameter>&nbsp;:</term>
<listitem><simpara> read line callback function, may be NULL in which case
line reading is emulated with <link linkend="g3d-stream-read"><function>g3d_stream_read()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seekfunc</parameter>&nbsp;:</term>
<listitem><simpara> seek callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tellfunc</parameter>&nbsp;:</term>
<listitem><simpara> tell callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizefunc</parameter>&nbsp;:</term>
<listitem><simpara> size callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>eoffunc</parameter>&nbsp;:</term>
<listitem><simpara> end-of-file callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closefunc</parameter>&nbsp;:</term>
<listitem><simpara> close callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> opaque data for all callback functions
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a newly allocated <link linkend="G3DStream"><type>G3DStream</type></link> or NULL in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-close" role="function">
<title>g3d_stream_close ()</title>
<indexterm zone="g3d-stream-close"><primary>g3d_stream_close</primary></indexterm><programlisting><link linkend="gint">gint</link>                g3d_stream_close                    (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Closes an open stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-skip" role="function">
<title>g3d_stream_skip ()</title>
<indexterm zone="g3d-stream-skip"><primary>g3d_stream_skip</primary></indexterm><programlisting><link linkend="gint">gint</link>                g3d_stream_skip                     (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="goffset">goffset</link> offset);</programlisting>
<para>
Skip a number of bytes (&gt;= 0) in stream even if it does not support
seeking.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> stream to skip bytes from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> number of bytes to skip
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success, -1 else
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-seek" role="function">
<title>g3d_stream_seek ()</title>
<indexterm zone="g3d-stream-seek"><primary>g3d_stream_seek</primary></indexterm><programlisting><link linkend="gint">gint</link>                g3d_stream_seek                     (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="goffset">goffset</link> offset,
                                                         <link linkend="GSeekType">GSeekType</link> whence);</programlisting>
<para>
Moves around the current position in the stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> stream to seek in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> number of bytes to seek
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>whence</parameter>&nbsp;:</term>
<listitem><simpara> seek type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success, -1 else
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-tell" role="function">
<title>g3d_stream_tell ()</title>
<indexterm zone="g3d-stream-tell"><primary>g3d_stream_tell</primary></indexterm><programlisting><link linkend="goffset">goffset</link>             g3d_stream_tell                     (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Tells the current position in the stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> stream to get position from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> current stream position
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-size" role="function">
<title>g3d_stream_size ()</title>
<indexterm zone="g3d-stream-size"><primary>g3d_stream_size</primary></indexterm><programlisting><link linkend="goffset">goffset</link>             g3d_stream_size                     (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Get the size in bytes of a stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> stream to get size from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> size of stream in bytes
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-eof" role="function">
<title>g3d_stream_eof ()</title>
<indexterm zone="g3d-stream-eof"><primary>g3d_stream_eof</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g3d_stream_eof                      (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Checks whether the stream has reached its end.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if no more data can be read, FALSE else.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-is-seekable" role="function">
<title>g3d_stream_is_seekable ()</title>
<indexterm zone="g3d-stream-is-seekable"><primary>g3d_stream_is_seekable</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            g3d_stream_is_seekable              (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Get information whether it is possible to seek in a stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if seekable, FALSE else
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-get-uri" role="function">
<title>g3d_stream_get_uri ()</title>
<indexterm zone="g3d-stream-get-uri"><primary>g3d_stream_get_uri</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              g3d_stream_get_uri                  (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Get the URI of a stream</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a non-NULL, zero-terminated string containing the URI of the
string. This return value should not be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-line" role="function">
<title>g3d_stream_line ()</title>
<indexterm zone="g3d-stream-line"><primary>g3d_stream_line</primary></indexterm><programlisting><link linkend="guint32">guint32</link>             g3d_stream_line                     (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Get the current line number from stream. This only works if line are
consequently read with <link linkend="g3d-stream-read-line"><function>g3d_stream_read_line()</function></link>, so it's only applicable
for text streams.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> stream to get line from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> current line number, may be 0
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read" role="function">
<title>g3d_stream_read ()</title>
<indexterm zone="g3d-stream-read"><primary>g3d_stream_read</primary></indexterm><programlisting><link linkend="gsize">gsize</link>               g3d_stream_read                     (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="gpointer">gpointer</link> ptr,
                                                         <link linkend="gsize">gsize</link> size);</programlisting>
<para>
Reads a number of bytes from the stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara> pointer to memory storage
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> number of bytes to read
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> number of bytes successfully read.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-line" role="function">
<title>g3d_stream_read_line ()</title>
<indexterm zone="g3d-stream-read-line"><primary>g3d_stream_read_line</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              g3d_stream_read_line                (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="gchar">gchar</link> *buf,
                                                         <link linkend="gsize">gsize</link> size);</programlisting>
<para>
Read a line (terminated by a newline character or end of file) from a
stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> stream to read a line from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> an allocated buffer to be filled
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> maximum length of line including terminating zero
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the read line or NULL in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-int8" role="function">
<title>g3d_stream_read_int8 ()</title>
<indexterm zone="g3d-stream-read-int8"><primary>g3d_stream_read_int8</primary></indexterm><programlisting><link linkend="gint32">gint32</link>              g3d_stream_read_int8                (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Read a 1 byte signed integer from file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The read value, 0 in case of error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-int16-be" role="function">
<title>g3d_stream_read_int16_be ()</title>
<indexterm zone="g3d-stream-read-int16-be"><primary>g3d_stream_read_int16_be</primary></indexterm><programlisting><link linkend="gint32">gint32</link>              g3d_stream_read_int16_be            (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Read a 2 byte big-endian signed integer from file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The read value, 0 in case of error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-int16-le" role="function">
<title>g3d_stream_read_int16_le ()</title>
<indexterm zone="g3d-stream-read-int16-le"><primary>g3d_stream_read_int16_le</primary></indexterm><programlisting><link linkend="gint32">gint32</link>              g3d_stream_read_int16_le            (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Read a 2 byte little-endian signed integer from file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The read value, 0 in case of error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-int32-be" role="function">
<title>g3d_stream_read_int32_be ()</title>
<indexterm zone="g3d-stream-read-int32-be"><primary>g3d_stream_read_int32_be</primary></indexterm><programlisting><link linkend="gint32">gint32</link>              g3d_stream_read_int32_be            (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Read a 4 byte big-endian signed integer from file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The read value, 0 in case of error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-int32-le" role="function">
<title>g3d_stream_read_int32_le ()</title>
<indexterm zone="g3d-stream-read-int32-le"><primary>g3d_stream_read_int32_le</primary></indexterm><programlisting><link linkend="gint32">gint32</link>              g3d_stream_read_int32_le            (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Read a 4 byte little-endian signed integer from file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The read value, 0 in case of error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-float-be" role="function">
<title>g3d_stream_read_float_be ()</title>
<indexterm zone="g3d-stream-read-float-be"><primary>g3d_stream_read_float_be</primary></indexterm><programlisting><link linkend="G3DFloat">G3DFloat</link>            g3d_stream_read_float_be            (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Read a 4 byte big-endian floating point number from file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The read value, 0 in case of error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-float-le" role="function">
<title>g3d_stream_read_float_le ()</title>
<indexterm zone="g3d-stream-read-float-le"><primary>g3d_stream_read_float_le</primary></indexterm><programlisting><link linkend="G3DFloat">G3DFloat</link>            g3d_stream_read_float_le            (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Read a 4 byte little-endian floating point number from file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The read value, 0 in case of error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-double-be" role="function">
<title>g3d_stream_read_double_be ()</title>
<indexterm zone="g3d-stream-read-double-be"><primary>g3d_stream_read_double_be</primary></indexterm><programlisting><link linkend="G3DDouble">G3DDouble</link>           g3d_stream_read_double_be           (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Read a 8 byte big-endian double-precision floating point number from file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The read value, 0 in case of error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-double-le" role="function">
<title>g3d_stream_read_double_le ()</title>
<indexterm zone="g3d-stream-read-double-le"><primary>g3d_stream_read_double_le</primary></indexterm><programlisting><link linkend="G3DDouble">G3DDouble</link>           g3d_stream_read_double_le           (<link linkend="G3DStream">G3DStream</link> *stream);</programlisting>
<para>
Read a 8 byte little-endian double-precision floating point number from
file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The read value, 0 in case of error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="g3d-stream-read-cstr" role="function">
<title>g3d_stream_read_cstr ()</title>
<indexterm zone="g3d-stream-read-cstr"><primary>g3d_stream_read_cstr</primary></indexterm><programlisting><link linkend="gint32">gint32</link>              g3d_stream_read_cstr                (<link linkend="G3DStream">G3DStream</link> *stream,
                                                         <link linkend="gchar">gchar</link> *buffer,
                                                         <link linkend="gint32">gint32</link> max_len);</programlisting>
<para>
Read a string (terminated by '\0') from stream</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> the stream to read from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> the buffer to fill
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_len</parameter>&nbsp;:</term>
<listitem><simpara> maximum number to read from stream
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> number of bytes read from stream
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="G3DStreamCloseFunc" role="function">
<title>G3DStreamCloseFunc ()</title>
<indexterm zone="G3DStreamCloseFunc"><primary>G3DStreamCloseFunc</primary></indexterm><programlisting><link linkend="gint">gint</link>                (*G3DStreamCloseFunc)               (<link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Callback function for <link linkend="g3d-stream-close"><function>g3d_stream_close()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> opaque stream data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success, -1 else.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="G3DStreamEofFunc" role="function">
<title>G3DStreamEofFunc ()</title>
<indexterm zone="G3DStreamEofFunc"><primary>G3DStreamEofFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*G3DStreamEofFunc)                 (<link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Callback function for <link linkend="g3d-stream-eof"><function>g3d_stream_eof()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> opaque stream data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on stream end-of-file, FALSE else.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="G3DStreamReadFunc" role="function">
<title>G3DStreamReadFunc ()</title>
<indexterm zone="G3DStreamReadFunc"><primary>G3DStreamReadFunc</primary></indexterm><programlisting><link linkend="gsize">gsize</link>               (*G3DStreamReadFunc)                (<link linkend="gpointer">gpointer</link> ptr,
                                                         <link linkend="gsize">gsize</link> size,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Callback function for <link linkend="g3d-stream-read"><function>g3d_stream_read()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara> buffer to read bytes into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> number of bytes to read
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> opaque stream data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> number of bytes actually read.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="G3DStreamReadLineFunc" role="function">
<title>G3DStreamReadLineFunc ()</title>
<indexterm zone="G3DStreamReadLineFunc"><primary>G3DStreamReadLineFunc</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              (*G3DStreamReadLineFunc)            (<link linkend="gchar">gchar</link> *buf,
                                                         <link linkend="gsize">gsize</link> size,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Callback function for <link linkend="g3d-stream-read-line"><function>g3d_stream_read_line()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> buffer to read bytes into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> maximum size of buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> opaque stream data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The line buffer or NULL in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="G3DStreamSeekFunc" role="function">
<title>G3DStreamSeekFunc ()</title>
<indexterm zone="G3DStreamSeekFunc"><primary>G3DStreamSeekFunc</primary></indexterm><programlisting><link linkend="gint">gint</link>                (*G3DStreamSeekFunc)                (<link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="goffset">goffset</link> offset,
                                                         <link linkend="GSeekType">GSeekType</link> whence);</programlisting>
<para>
Callback function for <link linkend="g3d-stream-seek"><function>g3d_stream_seek()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> opaque stream data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> seek offset
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>whence</parameter>&nbsp;:</term>
<listitem><simpara> seek type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success, -1 else.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="G3DStreamSizeFunc" role="function">
<title>G3DStreamSizeFunc ()</title>
<indexterm zone="G3DStreamSizeFunc"><primary>G3DStreamSizeFunc</primary></indexterm><programlisting><link linkend="goffset">goffset</link>             (*G3DStreamSizeFunc)                (<link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Callback function for <link linkend="g3d-stream-size"><function>g3d_stream_size()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> opaque stream data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> size of stream.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="G3DStreamTellFunc" role="function">
<title>G3DStreamTellFunc ()</title>
<indexterm zone="G3DStreamTellFunc"><primary>G3DStreamTellFunc</primary></indexterm><programlisting><link linkend="goffset">goffset</link>             (*G3DStreamTellFunc)                (<link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Callback function for <link linkend="g3d-stream-tell"><function>g3d_stream_tell()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> opaque stream data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> current stream position.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="libg3d-stream.see-also">
<title>See Also</title>
<link linkend="G3DStream"><type>G3DStream</type></link>
</refsect1>

</refentry>
